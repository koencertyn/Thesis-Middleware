package drool.instances
 
import entity.request.Request;
import enums.Purpose;
import enums.Action;
import monitor.MonitorMetaData;
import controller.cloud.CloudManager;
import controller.privateCloud.LocalController;

//__________________  Some Default constraints, can be adjusted at runtime _________________________ 

function Boolean locallyCalculationOverloaded() {
    return (MonitorMetaData.getAvailableProcessors() < 2);
}

function Boolean locallyStorageOverloaded() {
    return (MonitorMetaData.getMemory() < 50);
}

//__________________  GENERAL REQUEST RULES, no further information given in request _________________________ 
 
//__________________  Calculation rules _________________________ 
 
rule "If localstate is not overloaded, execute calculation locally."
    when
        r : Request(r.getProperties().isEmpty() && r.getHandled() == false && r.getPurpose() == Purpose.CALCULATION
        	&& ! locallyCalculationOverloaded())
    then
    	System.out.println("Forwarded locally - no overloading");
        r.setHandled();
        r.setAction(Action.CALCULATE_LOCAL);
        System.out.println("changed action to calculate local");
end

rule "If localstate is overloaded, and has 'fresh' cloud booted, forward calculation to cloud."
    when
        r : Request(r.getProperties().isEmpty() && r.getHandled() == false && r.getPurpose() == Purpose.CALCULATION
        	&& locallyCalculationOverloaded() && CloudManager.hasAvailableCalculationCloud() )
    then
        r.setHandled();
        System.out.println("Forwarded to cloud");
        r.setAction(Action.CALCULATE_CLOUD);
end

rule "If localstate is overloaded, and has no 'fresh' cloud booted, forward calculation to cloud manager to select cloud."
    when
        r : Request(r.getProperties().isEmpty() && r.getHandled() == false && r.getPurpose() == Purpose.CALCULATION
        	&& locallyCalculationOverloaded()  && ! CloudManager.hasAvailableCalculationCloud() )
    then
        r.setHandled();
        System.out.println("Booting and forwarded to cloud");
         r.setAction(Action.CREATE_NEW_CLOUD);
end

//__________________  Storage rules _________________________

rule "If localstate is not overloaded, execute storage locally."
    when
        r : Request(r.getProperties().isEmpty() && r.getHandled() == false && r.getPurpose() == Purpose.STORAGE
        	&& ! locallyStorageOverloaded() )
    then
        System.out.println("Forwarded locally");
        r.setHandled();
         r.setAction(Action.STORE_LOCAL);
end

rule "If localstate is overloaded, and has 'fresh' cloud booted, forward storage to cloud."
    when
        r : Request(r.getProperties().isEmpty() && r.getHandled() == false && r.getPurpose() == Purpose.STORAGE
        	&& locallyStorageOverloaded() && CloudManager.hasAvailableStorageCloud() )
    then
        r.setHandled();
        System.out.println("Forwarded to cloud");
         r.setAction(Action.STORE_CLOUD);
end

rule "If localstate is overloaded, and has no 'fresh' cloud booted, forward storage to cloud manager to select cloud."
    when
        r : Request(r.getProperties().isEmpty() && r.getHandled() == false && r.getPurpose() == Purpose.STORAGE
        	&& locallyStorageOverloaded()  && ! CloudManager.hasAvailableStorageCloud() )
    then
        r.setHandled();
        System.out.println("Booting and forwarded to cloud");
        r.setAction(Action.CREATE_NEW_CLOUD);
end

rule "test"
	when
        r : Request(r.getPurpose() == Purpose.STORAGE)
    then
        r.setHandled();
        System.out.println("Booting and forwarded to cloud");
        r.setAction(Action.CREATE_NEW_CLOUD);
end
