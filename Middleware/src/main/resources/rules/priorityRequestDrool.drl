
package drool.instances;
 
import entity.request.Request;
import enums.Purpose;
import enums.Priority;
import monitor.MonitorMetaData;
import controller.cloud.CloudManager;
import controller.privateCloud.LocalController;

//__________________  Some Default additional constraints, can be adjusted at runtime _________________________ 

function Boolean locallyCalculationDanger(){
	return locallyCalculationOverloaded() || (MonitorMetaData.getSystemAVGLoad() > 3);
}

function Boolean locallyStorageDanger(){
	return locallyStorageOverloaded() || (MonitorMetaData.getMemory() < 30);
}

//__________________  GENERAL REQUEST RULES, no further information given in request _________________________ 
 
//__________________  Calculation rules _________________________

rule "If localstate is not overloaded, (no matter priority) execute calculation locally."
    when
        r : Request(r.getPriority() != null && r.getProperties().isEmpty() && r.handled == false && r.getPurpose() == Purpose.CALCULATION
        	&& ! locallyCalculationOverloaded() && ! locallyCalculationDanger() )
    then
    	System.out.println("Forwarded locally");
        r.setHandled();
        r.setAction(Action.CALCULATE_LOCAL);
end

rule "Priority low - calculation: always execute locally."
    when
        r : Request(r.getPriority() == Priority.LOW && r.getProperties().isEmpty() && r.handled == false && r.getPurpose() == Purpose.CALCULATION)
    then
    	System.out.println("Added to local queue");
        r.setHandled();
        r.setAction(Action.ADD_LOCALQUEUE);
end

rule "Priority medium - calculation : if local situation is 'tricky' and has new calculation cloud booted execute in cloud."
    when
        r : Request(r.getPriority() == Priority.MEDIUM && r.getProperties().isEmpty() && r.handled == false && r.getPurpose() == Purpose.CALCULATION
        	&& locallyCalculationDanger())
    then
    	System.out.println("execute on booted cloud");
        r.setHandled();
        r.setAction(Action.CALCULATE_LOCAL);
end

rule "Priority medium - calculation : if local situation is 'tricky' and has no new calculation cloud booted execute locally."
    when
        r : Request(r.getPriority() == Priority.MEDIUM && r.getProperties().isEmpty() && r.handled == false && r.getPurpose() == Purpose.CALCULATION
        	&& locallyCalculationDanger() && ! locallyCalculationOverloaded())
    then
    	System.out.println("execute on locally");
        r.setHandled();
        r.setAction(Action.CALCULATE_LOCAL);
end

rule "Priority medium - calculation : if local situation is overloaded and has new calculation cloud booted execute in cloud."
    when
        r : Request(r.getPriority() == Priority.MEDIUM && r.getProperties().isEmpty() && r.handled == false && r.getPurpose() == Purpose.CALCULATION
        	&& locallyCalculationDanger() && ! locallyCalculationOverloaded())
    then
    	System.out.println("execute on newly booted cloud");
        r.setHandled();
        r.setAction(Action.CREATE_NEW_CLOUD);
end

rule "Priority high - calculation : if local situation is overloaded and has new calculation cloud booted execute in cloud."
    when
        r : Request(r.getPriority() == Priority.HIGH && r.getProperties().isEmpty() && r.handled == false && r.getPurpose() == Purpose.CALCULATION
        	&& locallyCalculationDanger() )
    then
    	System.out.println("execute on newly booted cloud");
        r.setHandled();
        r.setAction(Action.CREATE_NEW_CLOUD);
end


//__________________  Storage rules _________________________


rule "If localstate is not overloaded, (no matter priority) store locally."
    when
        r : Request(r.getPriority() != null  && r.getProperties().isEmpty() && r.handled == false && r.getPurpose() == Purpose.STORAGE
        	&& ! locallyStorageOverloaded() && ! locallyStorageDanger() )
    then
    	System.out.println("Store locally");
        r.setHandled();
        r.setAction(Action.STORE_LOCAL);
end

rule "If localstate is in danger, store locally (except for high priority accounts)."
    when
        r : Request(r.getPriority() != Priority.HIGH  && r.getProperties().isEmpty() && r.handled == false && r.getPurpose() == Purpose.STORAGE
        	&& ! locallyStorageOverloaded() && locallyStorageDanger() )
    then
    	System.out.println("Store locally");
        r.setHandled();
        r.setAction(Action.STORE_LOCAL);
end

rule "High prio : If localstate is in danger store on already booted cloud."
    when
        r : Request(r.getPriority() == Priority.HIGH  && r.getProperties().isEmpty() && r.handled == false && r.getPurpose() == Purpose.STORAGE
        	&& locallyStorageDanger() && CloudManager.hasAvailableStorageCloud())
    then
        r.setHandled();
        r.setAction(Action.STORE_CLOUD);
end

rule "High prio : If localstate is in danger store on newly booted cloud."
    when
        r : Request(r.getPriority() == Priority.HIGH  && r.getProperties().isEmpty() && r.handled == false && r.getPurpose() == Purpose.STORAGE
        	&& locallyStorageDanger() && ! CloudManager.hasAvailableStorageCloud())
    then
        r.setHandled();
        r.setAction(Action.CREATE_NEW_CLOUD);
end

